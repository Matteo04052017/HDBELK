/*----- PROTECTED REGION ID(EarthQuakeGeneratorClass.h) ENABLED START -----*/
//=============================================================================
//
// file :        EarthQuakeGeneratorClass.h
//
// description : Include for the EarthQuakeGenerator root class.
//               This class is the singleton class for
//                the EarthQuakeGenerator device class.
//               It contains all properties and methods which the 
//               EarthQuakeGenerator requires only once e.g. the commands.
//
// project :     EarthQuakeGenerator
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
// Matteo Di Carlo INAF
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef EarthQuakeGeneratorClass_H
#define EarthQuakeGeneratorClass_H

#include <tango.h>
#include <EarthQuakeGenerator.h>


/*----- PROTECTED REGION END -----*/	//	EarthQuakeGeneratorClass.h


namespace EarthQuakeGenerator_ns
{
/*----- PROTECTED REGION ID(EarthQuakeGeneratorClass::classes for dynamic creation) ENABLED START -----*/


/*----- PROTECTED REGION END -----*/	//	EarthQuakeGeneratorClass::classes for dynamic creation

//=========================================
//	Define classes for attributes
//=========================================
//	Attribute DateReferenceEvent class definition
class DateReferenceEventAttrib: public Tango::Attr
{
public:
	DateReferenceEventAttrib():Attr("DateReferenceEvent",
			Tango::DEV_STRING, Tango::READ) {};
	~DateReferenceEventAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<EarthQuakeGenerator *>(dev))->read_DateReferenceEvent(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<EarthQuakeGenerator *>(dev))->is_DateReferenceEvent_allowed(ty);}
};

//	Attribute Latitude class definition
class LatitudeAttrib: public Tango::Attr
{
public:
	LatitudeAttrib():Attr("Latitude",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~LatitudeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<EarthQuakeGenerator *>(dev))->read_Latitude(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<EarthQuakeGenerator *>(dev))->is_Latitude_allowed(ty);}
};

//	Attribute Longitude class definition
class LongitudeAttrib: public Tango::Attr
{
public:
	LongitudeAttrib():Attr("Longitude",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~LongitudeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<EarthQuakeGenerator *>(dev))->read_Longitude(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<EarthQuakeGenerator *>(dev))->is_Longitude_allowed(ty);}
};

//	Attribute Depth class definition
class DepthAttrib: public Tango::Attr
{
public:
	DepthAttrib():Attr("Depth",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~DepthAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<EarthQuakeGenerator *>(dev))->read_Depth(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<EarthQuakeGenerator *>(dev))->is_Depth_allowed(ty);}
};

//	Attribute ReportedMagnitudes class definition
class ReportedMagnitudesAttrib: public Tango::Attr
{
public:
	ReportedMagnitudesAttrib():Attr("ReportedMagnitudes",
			Tango::DEV_STRING, Tango::READ) {};
	~ReportedMagnitudesAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<EarthQuakeGenerator *>(dev))->read_ReportedMagnitudes(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<EarthQuakeGenerator *>(dev))->is_ReportedMagnitudes_allowed(ty);}
};

//	Attribute GeographicaLocation class definition
class GeographicaLocationAttrib: public Tango::Attr
{
public:
	GeographicaLocationAttrib():Attr("GeographicaLocation",
			Tango::DEV_STRING, Tango::READ) {};
	~GeographicaLocationAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<EarthQuakeGenerator *>(dev))->read_GeographicaLocation(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<EarthQuakeGenerator *>(dev))->is_GeographicaLocation_allowed(ty);}
};

//	Attribute JsonTrans class definition
class JsonTransAttrib: public Tango::Attr
{
public:
	JsonTransAttrib():Attr("JsonTrans",
			Tango::DEV_STRING, Tango::READ) {};
	~JsonTransAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<EarthQuakeGenerator *>(dev))->read_JsonTrans(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<EarthQuakeGenerator *>(dev))->is_JsonTrans_allowed(ty);}
};

//	Attribute NdkFileName class definition
class NdkFileNameAttrib: public Tango::Attr
{
public:
	NdkFileNameAttrib():Attr("NdkFileName",
			Tango::DEV_STRING, Tango::READ_WRITE) {};
	~NdkFileNameAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<EarthQuakeGenerator *>(dev))->read_NdkFileName(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<EarthQuakeGenerator *>(dev))->write_NdkFileName(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<EarthQuakeGenerator *>(dev))->is_NdkFileName_allowed(ty);}
};

//	Attribute archiveValue class definition
class archiveValueAttrib: public Tango::Attr
{
public:
	archiveValueAttrib():Attr("archiveValue",
			Tango::DEV_STRING, Tango::READ) {};
	~archiveValueAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<EarthQuakeGenerator *>(dev))->read_archiveValue(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<EarthQuakeGenerator *>(dev))->is_archiveValue_allowed(ty);}
};


//=========================================
//	Define classes for commands
//=========================================
//	Command NextEvent class definition
class NextEventClass : public Tango::Command
{
public:
	NextEventClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	NextEventClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~NextEventClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<EarthQuakeGenerator *>(dev))->is_NextEvent_allowed(any);}
};

//	Command Stop class definition
class StopClass : public Tango::Command
{
public:
	StopClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	StopClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~StopClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<EarthQuakeGenerator *>(dev))->is_Stop_allowed(any);}
};


/**
 *	The EarthQuakeGeneratorClass singleton definition
 */

#ifdef _TG_WINDOWS_
class __declspec(dllexport)  EarthQuakeGeneratorClass : public Tango::DeviceClass
#else
class EarthQuakeGeneratorClass : public Tango::DeviceClass
#endif
{
	/*----- PROTECTED REGION ID(EarthQuakeGeneratorClass::Additionnal DServer data members) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	EarthQuakeGeneratorClass::Additionnal DServer data members

	public:
		//	write class properties data members
		Tango::DbData	cl_prop;
		Tango::DbData	cl_def_prop;
		Tango::DbData	dev_def_prop;
	
		//	Method prototypes
		static EarthQuakeGeneratorClass *init(const char *);
		static EarthQuakeGeneratorClass *instance();
		~EarthQuakeGeneratorClass();
		Tango::DbDatum	get_class_property(string &);
		Tango::DbDatum	get_default_device_property(string &);
		Tango::DbDatum	get_default_class_property(string &);
	
	protected:
		EarthQuakeGeneratorClass(string &);
		static EarthQuakeGeneratorClass *_instance;
		void command_factory();
		void attribute_factory(vector<Tango::Attr *> &);
		void pipe_factory();
		void write_class_property();
		void set_default_property();
		void get_class_property();
		string get_cvstag();
		string get_cvsroot();
	
	private:
		void device_factory(const Tango::DevVarStringArray *);
		void create_static_attribute_list(vector<Tango::Attr *> &);
		void erase_dynamic_attributes(const Tango::DevVarStringArray *,vector<Tango::Attr *> &);
		vector<string>	defaultAttList;
		Tango::Attr *get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname);
};

}	//	End of namespace

#endif   //	EarthQuakeGenerator_H
