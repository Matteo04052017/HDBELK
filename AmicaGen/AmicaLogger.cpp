/*----- PROTECTED REGION ID(AmicaLogger.cpp) ENABLED START -----*/
static const char* RcsId = "$Id:  $";
//=============================================================================
//
// file :        AmicaLogger.cpp
//
// description : C++ source for the AmicaLogger class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               AmicaLogger are implemented in this file.
//
// project :     AmicaLogger
//
// This file is part of Tango device class.
//
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
//
// $Author:  $
// Matteo Di Carlo
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================

#include <AmicaLogger.h>
#include <AmicaLoggerClass.h>

/*----- PROTECTED REGION END -----*/	//	AmicaLogger.cpp

/**
 *  AmicaLogger class description:
 *    AmicaLogger
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  Inherited (no method)
//  Status        |  Inherited (no method)
//  Next          |  next
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  ActivePower1     |  Tango::DevDouble	Scalar
//  ActivePower2     |  Tango::DevDouble	Scalar
//  ActivePower3     |  Tango::DevDouble	Scalar
//  CurrentVoltage1  |  Tango::DevDouble	Scalar
//  CurrentVoltage2  |  Tango::DevDouble	Scalar
//  CurrentVoltage3  |  Tango::DevDouble	Scalar
//  Day              |  Tango::DevShort	Scalar
//  Hour             |  Tango::DevDouble	Scalar
//  LineVoltage1     |  Tango::DevDouble	Scalar
//  LineVoltage2     |  Tango::DevDouble	Scalar
//  LineVoltage3     |  Tango::DevDouble	Scalar
//  CurrentNeutro    |  Tango::DevDouble	Scalar
//  JsonTrans        |  Tango::DevString	Scalar
//================================================================

namespace AmicaLogger_ns
{
/*----- PROTECTED REGION ID(AmicaLogger::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	AmicaLogger::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : AmicaLogger::AmicaLogger()
 *	Description : Constructors for a Tango device
 *                implementing the classAmicaLogger
 */
//--------------------------------------------------------
AmicaLogger::AmicaLogger(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(AmicaLogger::constructor_1) ENABLED START -----*/
    init_device();

    /*----- PROTECTED REGION END -----*/	//	AmicaLogger::constructor_1
}
//--------------------------------------------------------
AmicaLogger::AmicaLogger(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(AmicaLogger::constructor_2) ENABLED START -----*/
    init_device();

    /*----- PROTECTED REGION END -----*/	//	AmicaLogger::constructor_2
}
//--------------------------------------------------------
AmicaLogger::AmicaLogger(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(AmicaLogger::constructor_3) ENABLED START -----*/
    init_device();

    /*----- PROTECTED REGION END -----*/	//	AmicaLogger::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : AmicaLogger::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void AmicaLogger::delete_device()
{
	DEBUG_STREAM << "AmicaLogger::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(AmicaLogger::delete_device) ENABLED START -----*/

    //	Delete device allocated objects

    /*----- PROTECTED REGION END -----*/	//	AmicaLogger::delete_device
	delete[] attr_ActivePower1_read;
	delete[] attr_ActivePower2_read;
	delete[] attr_ActivePower3_read;
	delete[] attr_CurrentVoltage1_read;
	delete[] attr_CurrentVoltage2_read;
	delete[] attr_CurrentVoltage3_read;
	delete[] attr_Day_read;
	delete[] attr_Hour_read;
	delete[] attr_LineVoltage1_read;
	delete[] attr_LineVoltage2_read;
	delete[] attr_LineVoltage3_read;
	delete[] attr_CurrentNeutro_read;
	delete[] attr_JsonTrans_read;
}

//--------------------------------------------------------
/**
 *	Method      : AmicaLogger::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void AmicaLogger::init_device()
{
	DEBUG_STREAM << "AmicaLogger::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(AmicaLogger::init_device_before) ENABLED START -----*/

    //	Initialization before get_device_property() call

    /*----- PROTECTED REGION END -----*/	//	AmicaLogger::init_device_before
	
	//	No device property to be read from database
	
	attr_ActivePower1_read = new Tango::DevDouble[1];
	attr_ActivePower2_read = new Tango::DevDouble[1];
	attr_ActivePower3_read = new Tango::DevDouble[1];
	attr_CurrentVoltage1_read = new Tango::DevDouble[1];
	attr_CurrentVoltage2_read = new Tango::DevDouble[1];
	attr_CurrentVoltage3_read = new Tango::DevDouble[1];
	attr_Day_read = new Tango::DevShort[1];
	attr_Hour_read = new Tango::DevDouble[1];
	attr_LineVoltage1_read = new Tango::DevDouble[1];
	attr_LineVoltage2_read = new Tango::DevDouble[1];
	attr_LineVoltage3_read = new Tango::DevDouble[1];
	attr_CurrentNeutro_read = new Tango::DevDouble[1];
	attr_JsonTrans_read = new Tango::DevString[1];
	/*----- PROTECTED REGION ID(AmicaLogger::init_device) ENABLED START -----*/
    //	Initialize device
    allEventInformation = new vector<string>();
    string startLineStr, firstLineStr, tmpString;
    std::stringstream ss;
    ifstream infile;
    infile.open("/home/osboxes/tango-dev/AmicaGen/MTME_seq.dat");
    while (std::getline(infile, tmpString)) {
        if (tmpString.find("    9999") == 0 && ss.str().length() != 0) {
            allEventInformation->push_back(ss.str());
            ss.str(std::string());
        }
        ss << tmpString;
    }
    infile.close();

    cout << "Events size = " << to_string(allEventInformation->size()) << "\n";

    /*----- PROTECTED REGION END -----*/	//	AmicaLogger::init_device
}


//--------------------------------------------------------
/**
 *	Method      : AmicaLogger::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void AmicaLogger::always_executed_hook()
{
	DEBUG_STREAM << "AmicaLogger::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(AmicaLogger::always_executed_hook) ENABLED START -----*/

    //	code always executed before all requests

    /*----- PROTECTED REGION END -----*/	//	AmicaLogger::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : AmicaLogger::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void AmicaLogger::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "AmicaLogger::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(AmicaLogger::read_attr_hardware) ENABLED START -----*/

    //	Add your own code

    /*----- PROTECTED REGION END -----*/	//	AmicaLogger::read_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute ActivePower1 related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void AmicaLogger::read_ActivePower1(Tango::Attribute &attr)
{
	DEBUG_STREAM << "AmicaLogger::read_ActivePower1(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(AmicaLogger::read_ActivePower1) ENABLED START -----*/
    //	Set the attribute value
    attr.set_value(attr_ActivePower1_read);

    /*----- PROTECTED REGION END -----*/	//	AmicaLogger::read_ActivePower1
}
//--------------------------------------------------------
/**
 *	Read attribute ActivePower2 related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void AmicaLogger::read_ActivePower2(Tango::Attribute &attr)
{
	DEBUG_STREAM << "AmicaLogger::read_ActivePower2(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(AmicaLogger::read_ActivePower2) ENABLED START -----*/
    //	Set the attribute value
    attr.set_value(attr_ActivePower2_read);

    /*----- PROTECTED REGION END -----*/	//	AmicaLogger::read_ActivePower2
}
//--------------------------------------------------------
/**
 *	Read attribute ActivePower3 related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void AmicaLogger::read_ActivePower3(Tango::Attribute &attr)
{
	DEBUG_STREAM << "AmicaLogger::read_ActivePower3(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(AmicaLogger::read_ActivePower3) ENABLED START -----*/
    //	Set the attribute value
    attr.set_value(attr_ActivePower3_read);

    /*----- PROTECTED REGION END -----*/	//	AmicaLogger::read_ActivePower3
}
//--------------------------------------------------------
/**
 *	Read attribute CurrentVoltage1 related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void AmicaLogger::read_CurrentVoltage1(Tango::Attribute &attr)
{
	DEBUG_STREAM << "AmicaLogger::read_CurrentVoltage1(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(AmicaLogger::read_CurrentVoltage1) ENABLED START -----*/
    //	Set the attribute value
    attr.set_value(attr_CurrentVoltage1_read);

    /*----- PROTECTED REGION END -----*/	//	AmicaLogger::read_CurrentVoltage1
}
//--------------------------------------------------------
/**
 *	Read attribute CurrentVoltage2 related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void AmicaLogger::read_CurrentVoltage2(Tango::Attribute &attr)
{
	DEBUG_STREAM << "AmicaLogger::read_CurrentVoltage2(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(AmicaLogger::read_CurrentVoltage2) ENABLED START -----*/
    //	Set the attribute value
    attr.set_value(attr_CurrentVoltage2_read);

    /*----- PROTECTED REGION END -----*/	//	AmicaLogger::read_CurrentVoltage2
}
//--------------------------------------------------------
/**
 *	Read attribute CurrentVoltage3 related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void AmicaLogger::read_CurrentVoltage3(Tango::Attribute &attr)
{
	DEBUG_STREAM << "AmicaLogger::read_CurrentVoltage3(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(AmicaLogger::read_CurrentVoltage3) ENABLED START -----*/
    //	Set the attribute value
    attr.set_value(attr_CurrentVoltage3_read);

    /*----- PROTECTED REGION END -----*/	//	AmicaLogger::read_CurrentVoltage3
}
//--------------------------------------------------------
/**
 *	Read attribute Day related method
 *	Description: 
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void AmicaLogger::read_Day(Tango::Attribute &attr)
{
	DEBUG_STREAM << "AmicaLogger::read_Day(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(AmicaLogger::read_Day) ENABLED START -----*/
    //	Set the attribute value
    attr.set_value(attr_Day_read);

    /*----- PROTECTED REGION END -----*/	//	AmicaLogger::read_Day
}
//--------------------------------------------------------
/**
 *	Read attribute Hour related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void AmicaLogger::read_Hour(Tango::Attribute &attr)
{
	DEBUG_STREAM << "AmicaLogger::read_Hour(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(AmicaLogger::read_Hour) ENABLED START -----*/
    //	Set the attribute value
    attr.set_value(attr_Hour_read);

    /*----- PROTECTED REGION END -----*/	//	AmicaLogger::read_Hour
}
//--------------------------------------------------------
/**
 *	Read attribute LineVoltage1 related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void AmicaLogger::read_LineVoltage1(Tango::Attribute &attr)
{
	DEBUG_STREAM << "AmicaLogger::read_LineVoltage1(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(AmicaLogger::read_LineVoltage1) ENABLED START -----*/
    //	Set the attribute value
    attr.set_value(attr_LineVoltage1_read);

    /*----- PROTECTED REGION END -----*/	//	AmicaLogger::read_LineVoltage1
}
//--------------------------------------------------------
/**
 *	Read attribute LineVoltage2 related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void AmicaLogger::read_LineVoltage2(Tango::Attribute &attr)
{
	DEBUG_STREAM << "AmicaLogger::read_LineVoltage2(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(AmicaLogger::read_LineVoltage2) ENABLED START -----*/
    //	Set the attribute value
    attr.set_value(attr_LineVoltage2_read);

    /*----- PROTECTED REGION END -----*/	//	AmicaLogger::read_LineVoltage2
}
//--------------------------------------------------------
/**
 *	Read attribute LineVoltage3 related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void AmicaLogger::read_LineVoltage3(Tango::Attribute &attr)
{
	DEBUG_STREAM << "AmicaLogger::read_LineVoltage3(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(AmicaLogger::read_LineVoltage3) ENABLED START -----*/
    //	Set the attribute value
    attr.set_value(attr_LineVoltage3_read);

    /*----- PROTECTED REGION END -----*/	//	AmicaLogger::read_LineVoltage3
}
//--------------------------------------------------------
/**
 *	Read attribute CurrentNeutro related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void AmicaLogger::read_CurrentNeutro(Tango::Attribute &attr)
{
	DEBUG_STREAM << "AmicaLogger::read_CurrentNeutro(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(AmicaLogger::read_CurrentNeutro) ENABLED START -----*/
    //	Set the attribute value
    attr.set_value(attr_CurrentVoltage3_read);
    /*----- PROTECTED REGION END -----*/	//	AmicaLogger::read_CurrentNeutro
}
//--------------------------------------------------------
/**
 *	Read attribute JsonTrans related method
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void AmicaLogger::read_JsonTrans(Tango::Attribute &attr)
{
	DEBUG_STREAM << "AmicaLogger::read_JsonTrans(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(AmicaLogger::read_JsonTrans) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_JsonTrans_read);
	
	/*----- PROTECTED REGION END -----*/	//	AmicaLogger::read_JsonTrans
}

//--------------------------------------------------------
/**
 *	Method      : AmicaLogger::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void AmicaLogger::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(AmicaLogger::add_dynamic_attributes) ENABLED START -----*/

    //	Add your own code to create and add dynamic attributes if any

    /*----- PROTECTED REGION END -----*/	//	AmicaLogger::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command Next related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void AmicaLogger::next()
{
	DEBUG_STREAM << "AmicaLogger::Next()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(AmicaLogger::next) ENABLED START -----*/

    //	Add your own code

    try
    {
        //	Add your own code
        if (!allEventInformation->empty()) {
            string tmpString = allEventInformation->front();
            cout << tmpString << "\n";

            std::stringstream ss(tmpString);
            std::string token;

            int i = 0;
            while (std::getline(ss, token, ' ')) {
                if (token.length() == 0)
                    continue;
                if (i > 13)
                    break;
                    
                if (i == 1)
                    *attr_Day_read = stoi(token);
                // if (i == 2) // line number
                if (i == 3)
                    *attr_Hour_read = stoi(token);
                if (i == 4)
                    *attr_LineVoltage1_read = stod(token);
                if (i == 5)
                    *attr_LineVoltage2_read = stod(token);
                if (i == 6)
                    *attr_LineVoltage3_read = stod(token);
                if (i == 7)
                    *attr_CurrentVoltage1_read = stod(token);
                if (i == 8)
                    *attr_CurrentVoltage2_read = stod(token);
                if (i == 9)
                    *attr_CurrentVoltage3_read = stod(token);
                if (i == 10)
                    *attr_ActivePower1_read = stod(token);
                if (i == 11)
                    *attr_ActivePower2_read = stod(token);
                if (i == 12)
                    *attr_ActivePower3_read = stod(token);
                if (i == 13)
                    *attr_CurrentNeutro_read = stod(token);
                i++;
            }
            
            json j = { { "Day", *attr_Day_read },
                       { "Hour", *attr_Hour_read },
                       { "LineVoltage1", *attr_LineVoltage1_read },
                       { "LineVoltage2", *attr_LineVoltage2_read },
                       { "LineVoltage3", *attr_LineVoltage3_read },
                       { "CurrentVoltage1", *attr_CurrentVoltage1_read },
                       { "CurrentVoltage2", *attr_CurrentVoltage2_read },
                       { "CurrentVoltage3", *attr_CurrentVoltage3_read },
                       { "ActivePower1", *attr_ActivePower1_read },
                       { "ActivePower2", *attr_ActivePower2_read },
                       { "ActivePower3", *attr_ActivePower3_read },
                       { "CurrentNeutro", *attr_CurrentNeutro_read }
                    };
            string jsonStr = j.dump();
            attr_JsonTrans_read[0] = new char[jsonStr.length() + 1];
            strcpy(attr_JsonTrans_read[0], jsonStr.c_str());

            allEventInformation->erase(allEventInformation->begin());
            cout << "Events size = " << to_string(allEventInformation->size()) << "\n";

            DeviceImpl::push_archive_event("Day", attr_Day_read, 1, 0, false);
            DeviceImpl::push_archive_event("Hour", attr_Hour_read, 1, 0, false);
            DeviceImpl::push_archive_event("LineVoltage1", attr_LineVoltage1_read, 1, 0, false);
            DeviceImpl::push_archive_event("LineVoltage2", attr_LineVoltage2_read, 1, 0, false);
            DeviceImpl::push_archive_event("LineVoltage3", attr_LineVoltage3_read, 1, 0, false);
            DeviceImpl::push_archive_event("CurrentVoltage1", attr_CurrentVoltage1_read, 1, 0, false);
            DeviceImpl::push_archive_event("CurrentVoltage2", attr_CurrentVoltage2_read, 1, 0, false);
            DeviceImpl::push_archive_event("CurrentVoltage3", attr_CurrentVoltage3_read, 1, 0, false);
            DeviceImpl::push_archive_event("ActivePower1", attr_ActivePower1_read, 1, 0, false);
            DeviceImpl::push_archive_event("ActivePower2", attr_ActivePower2_read, 1, 0, false);
            DeviceImpl::push_archive_event("ActivePower3", attr_ActivePower3_read, 1, 0, false);
            DeviceImpl::push_archive_event("CurrentNeutro", attr_CurrentNeutro_read, 1, 0, false);
            DeviceImpl::push_archive_event("JsonTrans", attr_JsonTrans_read, 1, 0, false);
        }
    }
    catch (int e)
    {
        cout << "An exception occurred. Exception Nr. " << e << '\n';
    }

    /*----- PROTECTED REGION END -----*/	//	AmicaLogger::next
}
//--------------------------------------------------------
/**
 *	Method      : AmicaLogger::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void AmicaLogger::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(AmicaLogger::add_dynamic_commands) ENABLED START -----*/

    //	Add your own code to create and add dynamic commands if any

    /*----- PROTECTED REGION END -----*/	//	AmicaLogger::add_dynamic_commands
}

/*----- PROTECTED REGION ID(AmicaLogger::namespace_ending) ENABLED START -----*/

//	Additional Methods
// //--------------------------------------------------------
// /**
//  *	Read attribute LineVoltage3 related method
//  *	Description:
//  *
//  *	Data type:	Tango::DevDouble
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void AmicaLogger::read_LineVoltage3(Tango::Attribute& attr)
// {
//     DEBUG_STREAM << "AmicaLogger::read_LineVoltage3(Tango::Attribute &attr) entering... " << endl;
//     //	Set the attribute value
//     attr.set_value(attr_LineVoltage3_read);
// }

/*----- PROTECTED REGION END -----*/	//	AmicaLogger::namespace_ending
} //	namespace
