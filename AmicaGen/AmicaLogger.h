/*----- PROTECTED REGION ID(AmicaLogger.h) ENABLED START -----*/
//=============================================================================
//
// file :        AmicaLogger.h
//
// description : Include file for the AmicaLogger class
//
// project :     AmicaLogger
//
// This file is part of Tango device class.
//
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
//
// $Author:  $
// Matteo Di Carlo
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================

#ifndef AmicaLogger_H
#define AmicaLogger_H

#include <tango.h>

/*----- PROTECTED REGION END -----*/	//	AmicaLogger.h
#include "json/json.hpp"
using json = nlohmann::json;

/**
 *  AmicaLogger class description:
 *    AmicaLogger
 */

namespace AmicaLogger_ns
{
/*----- PROTECTED REGION ID(AmicaLogger::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations

/*----- PROTECTED REGION END -----*/	//	AmicaLogger::Additional Class Declarations

class AmicaLogger : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(AmicaLogger::Data Members) ENABLED START -----*/

    //	Add your own data members
private:
    vector<string>* allEventInformation;

    /*----- PROTECTED REGION END -----*/	//	AmicaLogger::Data Members


//	Attribute data members
public:
	Tango::DevDouble	*attr_ActivePower1_read;
	Tango::DevDouble	*attr_ActivePower2_read;
	Tango::DevDouble	*attr_ActivePower3_read;
	Tango::DevDouble	*attr_CurrentVoltage1_read;
	Tango::DevDouble	*attr_CurrentVoltage2_read;
	Tango::DevDouble	*attr_CurrentVoltage3_read;
	Tango::DevShort	*attr_Day_read;
	Tango::DevDouble	*attr_Hour_read;
	Tango::DevDouble	*attr_LineVoltage1_read;
	Tango::DevDouble	*attr_LineVoltage2_read;
	Tango::DevDouble	*attr_LineVoltage3_read;
	Tango::DevDouble	*attr_CurrentNeutro_read;
	Tango::DevString	*attr_JsonTrans_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	AmicaLogger(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	AmicaLogger(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	AmicaLogger(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~AmicaLogger() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();


//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : AmicaLogger::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute ActivePower1 related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_ActivePower1(Tango::Attribute &attr);
	virtual bool is_ActivePower1_allowed(Tango::AttReqType type);
/**
 *	Attribute ActivePower2 related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_ActivePower2(Tango::Attribute &attr);
	virtual bool is_ActivePower2_allowed(Tango::AttReqType type);
/**
 *	Attribute ActivePower3 related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_ActivePower3(Tango::Attribute &attr);
	virtual bool is_ActivePower3_allowed(Tango::AttReqType type);
/**
 *	Attribute CurrentVoltage1 related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_CurrentVoltage1(Tango::Attribute &attr);
	virtual bool is_CurrentVoltage1_allowed(Tango::AttReqType type);
/**
 *	Attribute CurrentVoltage2 related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_CurrentVoltage2(Tango::Attribute &attr);
	virtual bool is_CurrentVoltage2_allowed(Tango::AttReqType type);
/**
 *	Attribute CurrentVoltage3 related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_CurrentVoltage3(Tango::Attribute &attr);
	virtual bool is_CurrentVoltage3_allowed(Tango::AttReqType type);
/**
 *	Attribute Day related methods
 *	Description: 
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
	virtual void read_Day(Tango::Attribute &attr);
	virtual bool is_Day_allowed(Tango::AttReqType type);
/**
 *	Attribute Hour related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_Hour(Tango::Attribute &attr);
	virtual bool is_Hour_allowed(Tango::AttReqType type);
/**
 *	Attribute LineVoltage1 related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_LineVoltage1(Tango::Attribute &attr);
	virtual bool is_LineVoltage1_allowed(Tango::AttReqType type);
/**
 *	Attribute LineVoltage2 related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_LineVoltage2(Tango::Attribute &attr);
	virtual bool is_LineVoltage2_allowed(Tango::AttReqType type);
/**
 *	Attribute LineVoltage3 related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_LineVoltage3(Tango::Attribute &attr);
	virtual bool is_LineVoltage3_allowed(Tango::AttReqType type);
/**
 *	Attribute CurrentNeutro related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_CurrentNeutro(Tango::Attribute &attr);
	virtual bool is_CurrentNeutro_allowed(Tango::AttReqType type);
/**
 *	Attribute JsonTrans related methods
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_JsonTrans(Tango::Attribute &attr);
	virtual bool is_JsonTrans_allowed(Tango::AttReqType type);


	//--------------------------------------------------------
	/**
	 *	Method      : AmicaLogger::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:
	/**
	 *	Command Next related method
	 *	Description: 
	 *
	 */
	virtual void next();
	virtual bool is_Next_allowed(const CORBA::Any &any);


	//--------------------------------------------------------
	/**
	 *	Method      : AmicaLogger::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(AmicaLogger::Additional Method prototypes) ENABLED START -----*/

    //	Additional Method prototypes


    /*----- PROTECTED REGION END -----*/	//	AmicaLogger::Additional Method prototypes
};

/*----- PROTECTED REGION ID(AmicaLogger::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions

/*----- PROTECTED REGION END -----*/	//	AmicaLogger::Additional Classes Definitions

}	//	End of namespace

#endif   //	AmicaLogger_H
